name: Build & Push to GAR & Dispatch to GitOps Repository (Workflow Dispatch)

on:
  workflow_call:
    inputs:
      gcp_project_id:
        description: "GCP project ID"
        required: true
        type: string
      gar_registry:
        description: "GAR host (e.g. asia-southeast1-docker.pkg.dev)"
        required: true
        type: string
      gar_repository:
        description: "GAR repository name (e.g. gcf-artifacts-folder)"
        required: false
        type: string
      image_name:
        description: "Docker image name (e.g. service-api)"
        required: true
        type: string
      image_prefix:
        description: "Docker image prefix (e.g. stable, staging-stable)"
        required: true
        type: string
      git_tag:
        description: "Git tag to checkout (e.g. v1.10.3). This tag must exist by the time this workflow is triggered."
        required: true
        type: string
      dockerfile:
        description: "Path to Dockerfile"
        required: false
        default: "Dockerfile"
        type: string
      context:
        description: "Docker build context"
        required: false
        default: "."
        type: string
      gitops_repository:
        description: "Target repo for repository_dispatch (e.g. your-org/gitops). Empty to skip."
        required: false
        default: ""
        type: string
      gitops_repository_event_type:
        description: "Fixed event-type (e.g., image-updates-app). If empty, uses prefix+image_name."
        required: false
        default: ""
        type: string
      gitops_repository_event_prefix:
        description: "Prefix for dynamic event-type (e.g., image-updates-)"
        required: false
        default: "image-updates-"
        type: string
      gitops_repository_include_app_field:
        description: 'Whether to include {"app":"<image_name>"} in payload'
        required: false
        default: false
        type: boolean
    secrets:
      GAR_CREDENTIALS:
        required: true
      PAT:
        required: false

concurrency:
  group: deploy-manual-${{ inputs.image_prefix }}-${{ inputs.image_name }}-${{ inputs.git_tag }}
  cancel-in-progress: false

jobs:
  build:
    name: Build & Push to GAR
    runs-on: ubuntu-latest
    timeout-minutes: 30

    outputs:
      docker_tag: ${{ steps.img.outputs.docker_tag }}
      repo: ${{ steps.img.outputs.repo }}
      image_digest: ${{ steps.ref.outputs.image_digest }}

    env:
      GAR_REGISTRY: ${{ inputs.gar_registry }}
      GCP_PROJECT_ID: ${{ inputs.gcp_project_id }}
      IMAGE_NAME: ${{ inputs.image_name }}
      IMAGE_PREFIX: ${{ inputs.image_prefix }}
      GIT_TAG: ${{ inputs.git_tag }}
      PAT: ${{ secrets.PAT }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.git_tag }}

      - id: git-sha
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - uses: google-github-actions/auth@v2
        with:
          create_credentials_file: true
          credentials_json: ${{ secrets.GAR_CREDENTIALS }}

      - uses: google-github-actions/setup-gcloud@v2

      - run: gcloud auth configure-docker $GAR_REGISTRY --quiet

      - uses: docker/setup-buildx-action@v3

      - id: img
        run: |
          if [ -n "${{ inputs.gar_repository }}" ]; then
            echo "repo=${GAR_REGISTRY}/${GCP_PROJECT_ID}/${{ inputs.gar_repository }}/${IMAGE_NAME}" >> $GITHUB_OUTPUT
          else
            echo "repo=${GAR_REGISTRY}/${GCP_PROJECT_ID}/${IMAGE_NAME}" >> $GITHUB_OUTPUT
          fi
          echo "docker_tag=${IMAGE_PREFIX}-${IMAGE_NAME}-${GIT_TAG}-${{ steps.git-sha.outputs.sha_short }}" >> $GITHUB_OUTPUT

      - name: Build & Push image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.dockerfile }}
          push: true
          build-args: |
            GH_PAT=${{ secrets.PAT }}
          tags: |
            ${{ steps.img.outputs.repo }}:${{ steps.img.outputs.docker_tag }}
            ${{ steps.img.outputs.repo }}:latest

      - id: ref
        run: echo "image_digest=${{ steps.img.outputs.repo }}@${{ steps.build.outputs.digest }}" >> $GITHUB_OUTPUT
